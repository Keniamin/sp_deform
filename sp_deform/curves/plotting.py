# -*- coding: utf-8 -*-
"""–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π."""

from enum import Enum

from plotly.graph_objs import Figure

from ..utils import make_common_layout, update_with_defaults
from .base_classes import SuperplasticityCurves, RateBasedCurves, StrainTimeBasedCurves
from .sets import (
    RateCurves, RateSensitivityCurves, StrainCurves,
    GrainGrowthCurves, ContinuousGrainsDistributionCurves,
)


class CurvesPlot(Figure):
    """–ö–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∫—Ä–∏–≤—ã–º–∏ —Å–≤–µ—Ä—Ö–ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏."""

    class Distributions(Enum):
        """–£–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≥—Ä–∞—Ñ–∏–∫ –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑—ë—Ä–µ–Ω –ª–∏–±–æ –∏—Ö –æ–±—ä—ë–º–Ω–æ–π –¥–æ–ª–∏ –ø–æ
        —Ä–∞–∑–º–µ—Ä—É.
        """
        COUNT = 'count'
        VOLUME = 'volume'

    def __init__(self, reference):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –æ—Å–µ–π –∏ –ø–æ–¥–ø–∏—Å—è–º–∏ –∫ –Ω–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–∏–ø–æ–º
        –∏–∑–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∫—Ä–∏–≤—ã—Ö. –ü–∞—Ä–∞–º–µ—Ç—Ä `reference` –∑–∞–¥–∞—ë—Ç —Ç–∏–ø –∫—Ä–∏–≤—ã—Ö –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤:
          * –∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫—Ä–∏–≤—ã—Ö ‚Äî –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –µ–≥–æ —Ç–∏–ø –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã;
          * —Ç–∏–ø–æ–º –Ω–∞–±–æ—Ä–∞ –∫—Ä–∏–≤—ã—Ö ‚Äî –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç—Ç–æ—Ç —Ç–∏–ø —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é;
          * –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è `Distributions` ‚Äî –≤—ã–≤–µ–¥–µ—Ç –æ—Å–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è;
          * `None` ‚Äî –Ω–µ –±—É–¥–µ—Ç –Ω–∏–∫–∞–∫ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å –æ—Å–∏, –æ—Å—Ç–∞–≤–ª—è—è —ç—Ç–æ –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –∫–æ–¥–∞.
        """
        layout = make_common_layout(add_xaxis=True, add_yaxis=True)

        def make_log_axis(axis, title):
            axis['type'] = 'log'
            axis['exponentformat'] = 'power'
            axis['title']['text'] = title

        def make_tozero_axis(axis, title):
            axis['rangemode'] = 'tozero'
            axis['title']['text'] = title

        if isinstance(reference, type) and issubclass(reference, SuperplasticityCurves):
            reference = reference({})  # empty set of given type with default settings

        if isinstance(reference, RateBasedCurves):
            make_log_axis(layout['xaxis'], 'ùúÄÃá, s‚Åª¬π')
        elif isinstance(reference, StrainTimeBasedCurves):
            if reference.base_variable is StrainTimeBasedCurves.BaseVariable.STRAIN:
                make_tozero_axis(layout['xaxis'], 'ùúÄ')
            elif reference.base_variable is StrainTimeBasedCurves.BaseVariable.TIME:
                make_tozero_axis(layout['xaxis'], 't, s')
            else:
                raise ValueError(f'Unknown base variable {reference.base_variable}')
        elif isinstance(reference, (ContinuousGrainsDistributionCurves, CurvesPlot.Distributions)):
            layout['xaxis']['title']['text'] = 'd, Œºm'

        if isinstance(reference, RateCurves):
            make_log_axis(layout['yaxis'], 'ùúé, MPa')
        elif isinstance(reference, RateSensitivityCurves):
            layout['yaxis']['title']['text'] = 'm'
        elif isinstance(reference, StrainCurves):
            make_tozero_axis(layout['yaxis'], 'ùúé, MPa')
        elif isinstance(reference, GrainGrowthCurves):
            layout['yaxis']['title']['text'] = 'd, Œºm'
        elif (
            isinstance(reference, ContinuousGrainsDistributionCurves)
            or reference is CurvesPlot.Distributions.COUNT
        ):
            make_tozero_axis(layout['yaxis'], 'n, pcs')
        elif reference is CurvesPlot.Distributions.VOLUME:
            make_tozero_axis(layout['yaxis'], 'v')

        super().__init__(layout=layout)

    def add_sorted_curve(
        self,
        curve,
        *,
        name=None,
        color=None,
        use_only_markers=False,
        line_params=None,
        marker_params=None,
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–∏–≤—É—é –Ω–∞ –≥—Ä–∞—Ñ–∏–∫. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫—Ä–∏–≤–∞—è –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ø–ª–æ—à–Ω–æ–π –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ª–∏–Ω–∏–µ–π.
        –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ—Ç–∫–∏ (–µ–¥–∏–Ω–∏—á–Ω—ã–µ —Ç–æ—á–∫–∏), –∞ —Ç–∞–∫–∂–µ
        –∑–∞–¥–∞—Ç—å –∏–º—è –∫—Ä–∏–≤–æ–π, —Ü–≤–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–∏–∏/–æ—Ç–º–µ—Ç–æ–∫.
        """
        scatter = dict(
            x=curve.x,
            y=curve.y,
            showlegend=(name is not None),
        )
        if name is not None:
            scatter['name'] = str(name)

        if use_only_markers:
            if color is None:
                color = 'gray'
            scatter.update(dict(
                mode='markers',
                marker=update_with_defaults(
                    marker_params,
                    color=color,
                    symbol='x-thin-open',
                    size=8,
                ),
            ))
        else:
            mode = 'lines' if marker_params is None else 'lines+markers'
            scatter.update(dict(
                mode=mode,
                line=update_with_defaults(
                    line_params,
                    color=color,
                    width=0.667,
                ),
                marker=update_with_defaults(
                    marker_params,
                    color=color,
                ),
            ))

        self.add_scatter(**scatter)
        return self

    def add_distribution(
        self,
        curve,
        *,
        color,
        name=None,
        opacity=0.2,
        line_params=None,
    ):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑—ë—Ä–µ–Ω –ø–æ —Ä–∞–∑–º–µ—Ä—É, –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –∑–∞–ª–∏–≤–∫–∏
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –æ–±–ª–∞—Å—Ç–∏. –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–¥–∞—Ç—å –∏–º—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
        —Ü–≤–µ—Ç –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–π –æ–±–ª–∞—Å—Ç—å –ª–∏–Ω–∏–∏.
        """
        scatter = dict(
            showlegend=(name is not None),
            mode='lines',
            line=update_with_defaults(
                line_params,
                color=color,
                width=0.667,
            ),
        )
        if name is not None:
            scatter['name'] = str(name)

        if len(curve) < 2:
            scatter.update(dict(
                x=[curve[0][0], curve[0][0]],
                y=[0, curve[0][1]],
            ))
            self.add_scatter(**scatter)
        else:
            sizes = curve.x
            middles = [0.5 * (s1 + s2) for s1, s2 in zip(sizes, sizes[1:])]
            middles.append(2 * sizes[-1] - middles[-1])
            prev_size = 2 * sizes[0] - middles[0]

            scatter_x = scatter['x'] = [prev_size]
            scatter_y = scatter['y'] = [0]
            for ind in range(len(curve)):
                new_size = middles[ind]
                scatter_x.extend([prev_size, new_size])
                scatter_y.extend([curve[ind][1]] * 2)
                prev_size = new_size
            scatter_x.append(prev_size)
            scatter_y.append(0)

            area_scatter = scatter.copy()
            area_scatter.pop('line')
            area_scatter.update(dict(
                showlegend=False,
                hoverinfo='none',
                mode='none',
                fill='toself',
                fillcolor=scatter['line']['color'],
                opacity=opacity,
            ))
            self.add_scatter(**area_scatter)
            self.add_scatter(**scatter)

        return self
