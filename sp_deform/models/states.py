# -*- coding: utf-8 -*-
"""–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–æ–≤, –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–≤–µ—Ä—Ö–ø–ª–∞—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è."""

import logging

from collections import namedtuple

from scipy.integrate import RK45

from ..curves import SortedCurve
from ..utils import COMPUTATIONAL_EPSILON


class PlasticMicrostructureState:
    """–ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –≤–∏–¥–µ –ø–∞—Ä—ã —á–∏—Å–µ–ª: –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π
    –ø–ª–∞—Å—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∑—ë—Ä–µ–Ω.
    """
    __slots__ = ('strain', 'size')

    def __init__(self, *, strain=0, size):
        self.strain = strain
        self.size = size

    def __str__(self):
        return f'd={self.size}, ùúÄ‚Çö={self.strain}'

    def make_step(self, specimen, time_step):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ `time_step` –ø—É—Ç—ë–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±—Ä–∞–∑—Ü–∞.
        """

        def get_derivative(time, state):
            model_state = dict(
                time=time,
                full_strain=specimen.get_strain(time),
                plastic_strain=state[0],
                grain_size=state[1],
            )
            return (
                specimen.model.get_plastic_strain_rate(**model_state),
                specimen.model.get_grain_size_rate(**model_state),
            )

        self.strain, self.size = _integrate_via_runge_kutta(
            get_derivative,
            specimen.time,
            (self.strain, self.size),
            time_step,
        )

    def calc_property(self, property, specimen):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
        """
        model_state = {
            'time': specimen.time,
            'full_strain': specimen.strain,
            'plastic_strain': self.strain,
            'grain_size': self.size,
        }
        if property in model_state:
            return model_state[property]
        calculator = getattr(specimen.model, f'get_{property}')
        return calculator(**model_state)


class VolumeFractionWeightedMicrostructureState:
    """–ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –≤–∏–¥–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –∑—ë—Ä–µ–Ω,
    –∫–∞–∂–¥–∞—è –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–Ω–∏–º–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–æ–ª—é –æ—Ç –æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞ –æ–±—Ä–∞–∑—Ü–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑—ë—Ä–Ω–∞
    –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π –ø–ª–∞—Å—Ç–∏—á–µ—Å–∫–æ–π –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –û–±—ä—ë–º–Ω—ã–µ –¥–æ–ª–∏ –≥—Ä—É–ø–ø –≤
    —Å—É–º–º–µ –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å 1, –æ–¥–Ω–∞–∫–æ –≥—Ä—É–ø–ø—ã —Å –¥–æ–ª–µ–π –º–µ–Ω—å—à–µ `MIN_TRACKABLE_FRACTION` –æ—Ç–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –¥–ª—è
    —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ (—á—Ç–æ –º–æ–∂–µ—Ç –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É).
    """
    MIN_TRACKABLE_FRACTION = 1e-5  # 0.001% of total volume
    __slots__ = ('grain_groups',)

    CombineTarget = namedtuple('CombineTarget', ('group', 'original_size', 'size_threshold'))

    class GrainGroup:
        """–ì—Ä—É–ø–ø–∞ –∑—ë—Ä–µ–Ω, –∑–∞–Ω–∏–º–∞—é—â–∞—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é –¥–æ–ª—é –æ–±—ä—ë–º–∞ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""

        def __init__(self, volume, state):
            self.volume = volume
            self.state = state

    def __init__(self, distribution):
        """–ó–∞–¥–∞—ë—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –æ–±—ä—ë–º–Ω—ã—Ö –¥–æ–ª–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É."""
        total_volume = sum(volume for _, volume in distribution)
        if abs(total_volume - 1) > self.MIN_TRACKABLE_FRACTION:
            raise ValueError(f'Total volume of the specimen must be 1, got: {total_volume}')
        self.grain_groups = [
            self.GrainGroup(volume=volume, state=PlasticMicrostructureState(size=size))
            for size, volume in distribution
        ]

    def make_step(self, specimen, time_step):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –ø—Ä–æ—à–µ—Å—Ç–≤–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ `time_step` –ø—É—Ç—ë–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è –∑—ë—Ä–µ–Ω –∏/–∏–ª–∏ —Å–∫–ª–µ–π–∫–∏ –≥—Ä—É–ø–ø —Å
        –±–ª–∏–∑–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥–µ–ª–∏).
        """
        for group in self.grain_groups:
            group.state.make_step(specimen, time_step)

        if getattr(specimen.model, 'get_refined_groups', None) is not None:
            self._refine_groups(specimen, time_step)

        if getattr(specimen.model, 'combine_grain_groups_size_threshold', None) is not None:
            self._combine_groups(specimen, time_step)

    def calc_property(self, property, specimen):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –æ–±—Ä–∞–∑—Ü–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        –º–∏–∫—Ä–æ—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–æ–¥–µ–ª—å—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ‚Äî –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –ø–æ –æ–±—ä—ë–º—É —Å—Ä–µ–¥–Ω–µ–µ —Ç–æ–π –∂–µ
        —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º –∑—ë—Ä–µ–Ω.
        """
        return sum(
            group.volume * group.state.calc_property(property, specimen)
            for group in self.grain_groups
        )

    def get_volumes(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä—ë–º–Ω—ã—Ö –¥–æ–ª–µ–π –≥—Ä—É–ø–ø –∑—ë—Ä–µ–Ω –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º."""
        return SortedCurve((group.state.size, group.volume) for group in self.grain_groups)

    def _refine_groups(self, specimen, time_step):
        """–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏–∑–º–µ–ª—å—á–µ–Ω–∏—è –∑—ë—Ä–µ–Ω, –≤—ã–∑—ã–≤–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –º–æ–¥–µ–ª–∏."""
        new_grain_groups = []
        refinement_time = specimen.time + time_step
        for group in self.grain_groups:
            refinement_result = specimen.model.get_refined_groups(
                time=refinement_time,
                time_step=time_step,
                full_strain=specimen.get_strain(refinement_time),
                plastic_strain=group.state.strain,
                grain_size=group.state.size,
                volume_fraction=group.volume,
            )
            if refinement_result is None:
                new_grain_groups.append(group)
                continue

            groups_metainfo = []
            for volume, size, strain in refinement_result:
                new_group = self.GrainGroup(
                    state=PlasticMicrostructureState(size=size, strain=strain),
                    volume=volume,
                )
                new_grain_groups.append(new_group)
                groups_metainfo.append(
                    f'  - 0x{id(new_group):X} ({new_group.state}, v={new_group.volume:.6})'
                )

            groups_metainfo = '\n'.join(groups_metainfo)
            logging.debug(
                f'For specimen 0x{id(specimen):X} after time step {specimen.time:.3}+{time_step:6}'
                f' grain group 0x{id(group):X} ({group.state}, v={group.volume:.6}) refined into'
                f' {len(refinement_result)} groups:\n{groups_metainfo}'
            )
        self.grain_groups = new_grain_groups

    def _combine_groups(self, specimen, time_step):
        """–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Å–∫–ª–µ–π–∫–∏ –≥—Ä—É–ø–ø –∑—ë—Ä–µ–Ω —Å –±–ª–∏–∑–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–π –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π
        —Ä–∞–±–æ—Ç–µ. –ü–æ—Ä–æ–≥ –±–ª–∏–∑–æ—Å—Ç–∏ –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `combine_grain_groups_size_threshold` —É –º–æ–¥–µ–ª–∏.
        """
        time_step_str = f'time step {specimen.time:.3}+{time_step:6}'
        new_grain_groups, combine_target = [], None
        for group in sorted(self.grain_groups, key=lambda group: group.state.size):
            if group.volume < self.MIN_TRACKABLE_FRACTION:
                logging.debug(
                    f'For specimen 0x{id(specimen):X} after {time_step_str}'
                    f' eliminated grain group 0x{id(group):X} ({group.state}, v={group.volume:.6})'
                )
                continue
            if combine_target is not None and group.state.size > combine_target.size_threshold:
                new_grain_groups.append(combine_target.group)
                combine_target = None
            if combine_target is None:
                threshold = group.state.size + specimen.model.combine_grain_groups_size_threshold
                combine_target = self.CombineTarget(
                    group=group,
                    original_size=group.state.size,
                    size_threshold=threshold,
                )
                continue

            target_group = combine_target.group
            logging.debug(
                f'For specimen 0x{id(specimen):X} after {time_step_str}'
                f' grain group 0x{id(group):X} ({group.state}, v={group.volume:.6}) combined with'
                f' group 0x{id(target_group):X} ({target_group.state}, v={target_group.volume:.6});'
                f' original sizes difference was {group.state.size - combine_target.original_size}'
            )
            new_volume = target_group.volume + group.volume
            for attribute in PlasticMicrostructureState.__slots__:
                weighted_sum = (
                    target_group.volume * getattr(target_group.state, attribute)
                    + group.volume * getattr(group.state, attribute)
                )
                setattr(target_group.state, attribute, weighted_sum / new_volume)
            target_group.volume = new_volume
        if combine_target is not None:
            new_grain_groups.append(combine_target.group)
        self.grain_groups = new_grain_groups


def _integrate_via_runge_kutta(get_derivative, initial_time, initial_state, time_step):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π –º–µ—Ç–æ–¥–æ–º –†—É–Ω–≥–µ-–ö—É—Ç—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—à–∏–±–æ–∫."""
    target_time = initial_time + time_step
    rk = RK45(
        get_derivative,
        t0=initial_time,
        y0=initial_state,
        t_bound=target_time,
        first_step=(0.5 * time_step),
    )
    while rk.status == 'running':
        message = rk.step()
    if rk.status != 'finished':
        raise RuntimeError(f'Runge-Kutta step failed: {message}')
    if abs(target_time - rk.t) > abs(target_time) * COMPUTATIONAL_EPSILON:
        raise RuntimeError('Runge-Kutta integral time mismatch')
    return rk.y
